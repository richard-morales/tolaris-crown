// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Room {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  price       Int
  capacity    Int
  coverImage  String
  blurb       String?
  description String?

  features Feature[]
  images   RoomImage[]

  @@index([slug])
}

model Feature {
  id     String @id @default(cuid())
  label  String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
}

model RoomImage {
  id     String @id @default(cuid())
  url    String
  sort   Int    @default(0)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@index([roomId, sort])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // For SQLite, no @db.Text annotations
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
