// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")     // pooled (runtime)
  directUrl         = env("DIRECT_URL")       // direct (migrations)
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // optional but best with Neon
}

/**
 * ---------------- Auth models ----------------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[] // userâ€™s reservations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // (SQLite) keep these as plain String/Int
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ---------------- Rooms & booking ----------------
 */

model Room {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  price       Int
  capacity    Int
  coverImage  String
  blurb       String?
  description String?

  features Feature[]
  images   RoomImage[]
  bookings Booking[] // reservations for this room

  @@index([slug])
}

model Feature {
  id     String @id @default(cuid())
  label  String
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model RoomImage {
  id     String @id @default(cuid())
  url    String
  sort   Int    @default(0)
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, sort])
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  checkIn   DateTime
  checkOut  DateTime
  guests    Int
  createdAt DateTime @default(now())

  reference String @unique // required
  status    String @default("confirmed")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, checkIn, checkOut])
}
